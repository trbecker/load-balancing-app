// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: intent.proto

#include "intent.pb.h"
#include "intent.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace intent {

static const char* Intent_method_names[] = {
  "/intent.Intent/setIntent",
};

std::unique_ptr< Intent::Stub> Intent::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Intent::Stub> stub(new Intent::Stub(channel));
  return stub;
}

Intent::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_setIntent_(Intent_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Intent::Stub::setIntent(::grpc::ClientContext* context, const ::intent::IntentRequest& request, ::intent::IntentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setIntent_, context, request, response);
}

void Intent::Stub::experimental_async::setIntent(::grpc::ClientContext* context, const ::intent::IntentRequest* request, ::intent::IntentResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setIntent_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::intent::IntentResponse>* Intent::Stub::AsyncsetIntentRaw(::grpc::ClientContext* context, const ::intent::IntentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::intent::IntentResponse>::Create(channel_.get(), cq, rpcmethod_setIntent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::intent::IntentResponse>* Intent::Stub::PrepareAsyncsetIntentRaw(::grpc::ClientContext* context, const ::intent::IntentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::intent::IntentResponse>::Create(channel_.get(), cq, rpcmethod_setIntent_, context, request, false);
}

Intent::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Intent_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Intent::Service, ::intent::IntentRequest, ::intent::IntentResponse>(
          std::mem_fn(&Intent::Service::setIntent), this)));
}

Intent::Service::~Service() {
}

::grpc::Status Intent::Service::setIntent(::grpc::ServerContext* context, const ::intent::IntentRequest* request, ::intent::IntentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace intent

